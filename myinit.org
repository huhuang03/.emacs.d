#+STARTUP overview 
* init
** Install all need packages
#+BEGIN_SRC emacs-lisp
;; enable comman lisp extension to enable some strange expression
(require 'cl)

;; you can use func eval-defun to rebuild variable
(setq th-lang_mode '(
                       groovy-mode
                       csharp-mode
                       yaml-mode
                       lua-mode
                       go-mode
                       web-mode
                       cmake-mode
                       markdown-mode))

(setq th-common_pkg '(
                      	github-modern-theme
                        avy
                        json-mode
                        htmlize
                        tiny
                        yasnippet
                        flycheck
                        monokai-theme
                        exec-path-from-shell
                        evil-surround
                        auto-complete
                        auto-complete-c-headers
                        company
                        ))

(defvar th-packages (append th-lang_mode th-common_pkg))

(defun th-install-packages ()	
  (dolist (pkg th-packages)
    (when (not (package-installed-p pkg))
	(progn
	  (package-refresh-contents)
	  (package-install pkg)
	  )
      )))
(th-install-packages)
#+END_SRC
** fix path
#+BEGIN_SRC emacs-lisp
;; copy path
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC
** env
#+BEGIN_SRC emacs-lisp
(setq default-process-coding-system '(utf-8 . utf-8))
(set-language-environment "UTF-8")
;; 文件编码
(prefer-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

* initial packages
** How to startup start speed?
   
~emacs-init-time~ show the startup time, for now is: 8.3

The key is use ~use-package~

And the options it provided:
- :hook
- :bind
- :commands
- :after
- :defer If you don't use other options, this one will defer loading unti after startup.
#+BEGIN_SRC 
(setq use-pacakge-verbose t)
(require 'use-package-ensure)
(setq use-pacakge-always-ensure t)
#+END_SRC
** evil
 #+BEGIN_SRC emacs-lisp
   (setq th-src-folder "")
   (defun th-folder-to-src (folder)
     (interactive)
     (concat th-src-folder folder))
   (setq th-path-gtd-file (th-folder-to-src "org/gtd.org"))
   (defun th-lambda-open-file (path)
     `(lambda ()
        (interactive)
        (find-file ,path)))

   (use-package evil
     :defer
     :config
     (require 'general)
     (evil-mode 1)

;;; define neotree-mode-map
     (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
     (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
     (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
     (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
     (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
     (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
     (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
     (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
     (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
     (evil-define-key 'normal global-map (kbd "SPC SPC") 'helm-M-x)

     (general-define-key
      :keymaps 'evil-normal-state-map
      :prefix "<SPC>"
      "abn" 'th-posts-new-post
      "abd" 'th-posts-new-draft

      "g" 'magit-status

      "fd" (lambda () (interactive) (dired "."))
      "fr" 'th-sudo-edit

      "hf" 'describe-function

      "bb" 'helm-buffers-list
      "bk" 'kill-this-buffer)

     (general-define-key
      :keymaps 'evil-normal-state-map
      :prefix "<SPC>"
      "wf" 'toggle-frame-fullscreen
      "wm" 'toggle-frame-maximized
      "ft" 'th-open-org-file
      "fc" 'th-open-config-file
      "fpp" 'th-open-pass-file
      "fpo" (th-lambda-open-file "~/source/password/password_no_password.org")
      "fb" (lambda () (interactive) (neotree-dir "~/source/huhuang03.github.io.posts/posts/"))
      "fpo" (lambda () (interactive) (find-file "~/source/password/password_no_password.org"))
      "fpo" (th-lambda-open-file (th-folder-to-src "password/password_no_password.org"))
      "fb" (lambda () (interactive) (neotree-dir (th-folder-to-src "huhuang03.github.io/posts/")))
      "fpo" (lambda () (interactive) (find-file (th-folder-to-src "password/password_no_password.org")))
      "fs" (lambda () (interactive) (find-file "~/.ShadowsocksX-NG/user-rule.txt"))
      "fn" (lambda () (interactive) (find-file (th-folder-to-src "org/note.org")))
      )
     )
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :after 'evil
    :commands projectile-mode
    :config
    (projectile-mode +1)
    (define-key evil-normal-state-map " p" 'projectile-command-map))
#+END_SRC

** which key
 Brings up some help
 #+BEGIN_SRC emacs-lisp
      ;; 看样子你是没有load起来啊
      (use-package which-key
        :defer
   ;; not work.
        :after 'evil
        :after 'gernal
        :config
        (which-key-mode)
        (setq general-default-keymaps 'evil-normal-state-map)
        (which-key-add-key-based-replacements
          "<SPC>a" "application"
          "<SPC>b" "buffer operator"
          "<SPC>f" "file operator"
          "<SPC>g" "git oprator"
          "<SPC>r" "window or frame"
          "<SPC>h" "help"

          "<SPC>ab" "blog"
          "<SPC>abn" "new blog"

          "<SPC>fd" "open dot file"
          "<SPC>fo" "open org file"
          "<SPC>fpo" "pwd file without pwd"

          "<SPC> bb" "switch buffer"
          "<SPC> bk" "kill buffer"
          "<SPC><SPC>" "helm-M-x"

          "<SPC>p" "project operators"
          ))
 #+END_SRC
** key-chord
#+BEGIN_SRC emacs-lisp
  ;; config evil
  (use-package key-chord
    :defer
    :after evil
    :config
    (key-chord-mode 1)

    (setq key-chord-two-keys-delay 0.5)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))

#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :commands (helm-M-x)
    :bind (("M-x" . helm-M-x)
           ("M-<f5>" . helm-find-files)
           ([f10] . helm-buffers-list)
           ([s-f10] . helm-recentf)
           )
    :config
    (require 'helm-config))
#+END_SRC

*** helm-swoop
#+BEGIN_SRC emacs-lisp
  (defun find-file-from-home ()
    (interactive)
    (helm-find-files-1 "~/"))

    (use-package helm-swoop
      :ensure t
      :init
      (use-package helm)
      (use-package evil)
      ;; will this work??
      ;; bind with map
      ;; I this this is not work, because the evil-normal-state-map is not ready yet.
      :bind (:map helm-swoop-map
                   ("C-n" . helm-next-line)
                   ("C-p" . helm-previous-line)
              :map evil-normal-state-map
              ("/" . helm-swoop)
              ;; find file in current dir
              ("<SPC>ff" . helm-find-files)
              ;; find file in home dir
              ("<SPC>fh" . find-file-from-home)
              )
      :config
      ;; disable pre input
      (setq helm-swoop-pre-input-function
            (lambda () ""))
      )
#+END_SRC
   
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    )
#+END_SRC

* package Init
** avy
#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind (("C-;" . avy-goto-char)))
#+END_SRC
** org mode
*** org-mode eval src block
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
    (org-babel-do-load-languages 'org-babel-load-languages '((ruby . t))))
#+END_SRC
*** org-mode chinese table
#+BEGIN_SRC emacs-lisp
(defun th_set-buffer-variable-pitch ()
    (interactive)
    (variable-pitch-mode t)
    (setq line-spacing 3)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-link nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
    )
;; (add-hook 'org-mode-hook 'th_set-buffer-variable-pitch)
#+END_SRC
*** toggle link display
#+BEGIN_SRC emacs-lisp
(defun org-toggle-link-display ()
"Toggle the literal or descriptive display of links."
(interactive)
(if org-descriptive-links
    (progn (org-remove-from-invisibility-spec '(org-link))
        (org-restart-font-lock)
        (setq org-descriptive-links nil))
    (progn (add-to-invisibility-spec '(org-link))
    (org-restart-font-lock)
    (setq org-descriptive-links t))))
#+END_SRC
** cmake mode
#+BEGIN_SRC emacs-lisp
(require 'cmake-mode)
#+END_SRC
** nand2tetris
*** hdl
#+BEGIN_SRC emacs-lisp
(if (file-exists-p "/Users/th/source/clone/nand2tetris")
    (setq nand2tetris-core-base-dir "/Users/th/source/clone/nand2tetris")
    (add-to-list 'auto-mode-alist '("\\.hdl\\'" . nand2tetris-mode)))
#+END_SRC
* Th
** load the local.el
#+BEGIN_SRC emacs-lisp  
(let ((local-path "~/.emacs.d/local.el"))
    (if (file-exists-p local-path)
      (load-file local-path)
    (message "not exist")))
#+END_SRC
** default global variable
#+BEGIN_SRC emacs-lisp
  (if (not (boundp 'th-src-folder))
      (setq th-src-folder "~/source/"))
#+END_SRC
** posts
#+BEGIN_SRC emacs-lisp
(require 'th-posts-mode)
#+END_SRC
** setup the source folder
#+BEGIN_SRC emacs-lisp
#+END_SRC
** other
#+BEGIN_SRC  emacs-lisp
;; config company
;; custom org mode
;; C-c [ to add file to agenda-files
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)


;; turn on recentf files feature
(recentf-mode 1)

;; auto follow link
(setq vc-follow-symlinks 1)

(when (display-graphic-p)
    (scroll-bar-mode -1))

(global-linum-mode 1) ; alway shwo line numbers
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
(electric-pair-mode t)



;; add make file to makefile-mode
(add-to-list 'auto-mode-alist '("Makefile" . makefile-mode))

;; keys
(defun th-open-org-file ()
  "Open org file"
  (interactive)
  (find-file th-path-gtd-file))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
)
#+END_SRC

** flycheck
*** enable flycheck
#+BEGIN_SRC emacs-lisp
(global-flycheck-mode)
#+END_SRC
*** flycheck c include path
#+BEGIN_SRC emacs-lisp
  (defun th-c-mode-common-hook ()
    (setq flycheck-clang-include-path (list "/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7"
                                            "/Users/th/source/libs/c/vector"
                                            "/usr/local/BerkeleyDB.4.4/include")))
  (add-hook 'c-mode-common-hook 'th-c-mode-common-hook)
#+END_SRC
*** flycheck support c++11
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
#+END_SRC

*** flycheck next error
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f2>") 'flycheck-next-error)
  (global-set-key (kbd "S-<f2>") 'flycheck-previous-error)
#+END_SRC

** json-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'json-mode-hook (lambda ()
                              (make-local-variable 'js-indent-line)
                              (setq js-indent-line 2)))
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-1") 'neotree-toggle)
#+END_SRC
*** config with evil
#+BEGIN_SRC emacs-lisp
#+END_SRC
** reload config file
 #+BEGIN_SRC emacs-lisp
   (defun th_config-reload()
     (interactive)
     (org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org")))
   (global-set-key (kbd "C-c r") 'th_config-reload)
 #+END_SRC
** f8 to execute source
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f8>") 'th_run-current-file)

  (setq th-link-lua "-L/usr/local/lib -llua -llualib")

  (defun th_run-current-file ()
    "Execute the currnt file.
  For example, if the file is a.c, then it'll call gcc a.c and then call ./a.out"
    (interactive)
    (let (
          (-suffix-map
           `(
             ("c" . "gcc")
             ("gradle" . "gradle")
             ("php" . "php")
             ("py" . "python")
             ("sh". "sh")
             ("dart". "dart")
             ("lua". "lua")
             ("rb". "ruby")
             ("cpp" . "g++ --std=c++11")
             ("js" . "node")
             ("go" . "go")
             ))
          -fname
          -fnameNoExtension
          -fSuffix
          -prog-name
          -is-scratch
          -cmd-str)

      (setq -is-scratch (string= (buffer-name) "*scratch*"))
      (if -is-scratch
          (eval-buffer)
        (progn
          (setq -fname (buffer-file-name))
          (setq -fnameNoExtension (file-name-sans-extension -fname))
          (setq -fSuffix (file-name-extension -fname))
          (setq -prog-name (cdr (assoc -fSuffix -suffix-map)))
          (setq -cmd-str (concat -prog-name " \"" -fname "\""))
          (setq -output-buffer "*th_run-current-file*")
          (when (not (buffer-file-name)) (save-buffer))
          (when (buffer-modified-p) (save-buffer))
          (cond
           ((string-equal -fSuffix "el") (load -fname))
           ((string-equal -fSuffix "py")
            (progn
              (if (is-python3-p -fname)
                  (shell-command (concat "python3 " -fname) "*th_run-current-file*")
                (shell-command (concat "python " -fname) "*th_run-current-file*"))))
           ((string-equal -fSuffix "c")
            (progn
              (setq source-files (th-get-source-files -fname))
              (setq fname-nodir (file-name-nondirectory -fname))
              (setq -cmd-str (concat -prog-name " " fname-nodir source-files))
              (if (contains-lua-p buffer-file-name)
                  (setq -cmd-str (concat -cmd-str " " th-link-lua)))
              (shell-command -cmd-str "*th_run-current-file outout*")
              (shell-command "./a.out")))
           ((string-equal -fSuffix "cpp")
            (progn
              (setq source-files (th-get-source-files -fname))
              (setq fname-nodir (file-name-nondirectory -fname))
              (setq -cmd-str (concat -prog-name " " fname-nodir source-files))
              (shell-command -cmd-str "*th_run-current-file outout*")
              (shell-command "./a.out")))
           ((string-equal -fSuffix "go")
            (progn
              (shell-command (concat "go run " -fname))))
           ((string-equal -fSuffix "gradle") (shell-command "gradle -q build"))
           (t (if -prog-name
                  (progn
                      (message "Running...")
                      (shell-command -cmd-str)
                      )
                  (message "No recognized program file suffix for this file."))))
          )
        )))


  (defun is-python3-p (filepath)
    "得到FILEPATH文件中是否#python3."
    (let ((lines (th-read-lines filepath)))
      (catch 'contains
        (progn
          (dolist (line lines)
            (if (string-match "^#python3" line)
                (throw 'contains t)))
          nil))))

  (defun contains-lua-p (filepath)
    "得到FILEPATH文件中是否include lua.h."
    (let ((lines (th-read-lines filepath)))
      (catch 'contains
        (progn
          (dolist (line lines)
            (if (string-match "^#include <lua.h>" line)
                (throw 'contains t)))
          nil))))

  (defun th-get-source-files (filepath)
      "得到源文件中所有通过#include \"xx.h\" 形式引入的头文件对应的[ xx.c yy.c]源文件列表
  如果存在，则返回a.c b.c 这样的字符串。如果没有，则返回空字符串
  Edit: 2018-6-17 过滤a.c中include \"a.h\"导入同名称头文件
  2017年02月24日"
      (let (
              (lines (th-read-lines filepath))
              (source_fn (file-name-nondirectory filepath))
              (rst ""))
      (dolist (line lines)
          (if (string-match "^#include \"\\(.*\\)\"\s*$" line)
              (progn
          (setq fileName (match-string 1 line))
          (when (string-match "[ \t]*$" fileName)
              (setq fileName (replace-match "" nil nil fileName)))
          (setq fileName (replace-regexp-in-string "h$" "c" fileName))
          (when (not (string= fileName source_fn))
              (setq rst (concat rst " " fileName))))
          (message "not found %s" line)))
      rst))
#+END_SRC
** set the startup page
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice th-path-gtd-file)
#+END_SRC
* Encrypt
 #+END_SRC
** quick function
#+BEGIN_SRC emacs-lisp
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))

(global-set-key
  (kbd "s-u")
  (lambda (&optional force-reverting)
    "Interactive call to revert-buffer. Ignoring the auto-save
 file and not requesting for confirmation. When the current buffer
 is modified, the command refuses to revert it, unless you specify
 the optional argument: force-reverting to true."
    (interactive "P")
    ;;(message "force-reverting value is %s" force-reverting)
    (if (or force-reverting (not (buffer-modified-p)))
        (revert-buffer :ignore-auto :noconfirm)
      (error "The buffer has been modified"))))

#+END_SRC

** auto indent
#+BEGIN_SRC emacs-lisp
(defun th-headline-auto-indent(start end len)
  (if (and (eq len 0)
       (th-should-handle-headline))
      (save-excursion (th-del-space-to-asterisk))))

(defun th-should-handle-headline()
  "是否应该处理headline的缩进, 
当*(一个多多个)不在行首的时候，
或-不在行首
应该处理."
  (and
   (eq (char-syntax (preceding-char)) ?\ )
   (or
    (looking-back "^\\s +\\*+\\s " nil)
    (looking-back "^\\s +\\-+\\s " nil))))

(defun th-del-space-to-asterisk()
  "从行首开始，删除至第一个不为空格的元素."
  (let ((left (progn
                (beginning-of-line)
                (point)))
        (right (progn
                 (beginning-of-line)
                 (skip-syntax-forward " ")
                 (point))))
    (delete-region left right)))

(defun th-add-headline-auto-indent-hook()
    (add-hook 'after-change-functions 'th-headline-auto-indent t t))

(add-hook 'org-mode-hook 'th-add-headline-auto-indent-hook t)
#+END_SRC
** encrypt
#+BEGIN_SRC emacs-lisp
;; org-mode 设定
(require 'org-crypt)

;; Add a hook to automatically encrypt entries before a file is saved to disk.
(org-crypt-use-before-save-magic)

;; 设定要加密的tag标签为secret
(setq org-crypt-tag-matcher "secret")

;; 避免 secret 這個 tag 被子項目繼承 造成重複加密
;; (但是子項目還是會被加密喔)
(setq org-tags-exclude-from-inheritance (quote ("secret")))

;; 用於加密的 GPG 金鑰
;; 可以設定任何 ID 或是設成 nil 來使用對稱式加密 (symmetric encryption)
(setq org-crypt-key nil)
#+END_SRC
** 加密整个文件
#+BEGIN_SRC emacs-lisp
(require 'epa-file)

;; 一直使用对称加密
(setq epa-file-select-keys 0)
(setq epa-pinentry-mode 'loopback)
#+END_SRC
* intel assembly
#+BEGIN_SRC emacs-lisp
(defun th_to-asm ()
  (interactive)
  (let (-fname
        -oname
        -obuffer_name
        -obuffer
        -command)
    (progn
      (setq -fname (buffer-file-name))
      (setq -oname (concat (file-name-sans-extension -fname) ".s"))
      (setq -obuffer_name (file-name-nondirectory -oname))
      (setq -command (concat "gcc -Og -S " -fname " -o " -oname))
      (shell-command  -command "*th-c-to-intel-asm*")

      (setq -obuffer (get-buffer -obuffer_name))
      (when -obuffer
        (with-current-buffer -obuffer
          (revert-buffer :ignore-auto :noconfirm :preserve-modes)))
      ))
  )
#+END_SRC
* uI
** try set front size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 180)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(show-paren-mode)
(global-visual-line-mode 1)
#+END_SRC
# ** Theme to black
# #+BEGIN_SRC emacs-lisp
# (require 'monokai-theme)
# (load-theme 'monokai t)
#+END_SRC

* my self function
  #+BEGIN_SRC emacs-lisp
    (defun th-open-config-file ()
      "Open dot file"
      (interactive)
      (find-file "~/.emacs.d/myinit.org"))

    (defun th-open-pass-file ()
      (interactive)
      (find-file (th-folder-to-src "password/password.org.gpg")))

    (defun th-sudo-edit (&optional arg)
      (interactive "P")
      (if (or arg (not buffer-file-name))
          (find-file (concat "/sudo:root@localhost:"
                             (ido-read-file-name "Fild file(as Root): ")))
        (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

    (defun th-inc-num-region (p m)
      "Increments the numbers in a given region"
      (interactive "r")
      (save-restriction
        (save-excursion
          (narrow-to-region p m)    
          (goto-char (point-min))   
          (forward-line)
          (let ((counter 1))
            (while (not (eq (point)
                            (point-max)))
              (goto-char (point-at-eol))
              (search-backward-regexp "[0-9]+" (point-at-bol) t)
              (let* ((this-num (string-to-number (match-string 0)))
                     (new-num-str (number-to-string (+ this-num
                                                       counter))))
                (replace-match new-num-str)
                (incf counter)
                (forward-line)))))))
    (defun th-read-lines (filepath)
      "Return a list of lines of a file at filepath"
      (with-temp-buffer
        (insert-file-contents filepath)
        (split-string (buffer-string) "\n" t)))




    (defun th-date-time()
      "返回Full ISO 8601格式的是时间。如2010-11-29T23:23:35+08:00"
     (concat
       (format-time-string "%Y-%m-%dT%T")
       ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
        (format-time-string "%z"))))

#+END_SRC
* key binding
** format code
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-l") 'indent-region)
#+END_SRC
** quick open file
#+BEGIN_SRC emacs-lisp  
#+END_SRC
* move around
** move between windows
#+BEGIN_SRC emacs-lisp
  (defun other-window-backward (&optional n)
    "Select Nth previous window."
    (interactive "P")
    (other-window (- (prefix-numeric-value n))))

  (global-set-key "\C-x\C-p" 'other-window-backward)
  (global-set-key "\C-x\C-n" 'other-window)
#+END_SRC
** move a line up or move a line down
- \C-e evil-scroll-down
- \C-y evil-scroll-up
** put point at top line of window
#+BEGIN_SRC emacs-lisp
  (defun point-to-top ()
    "Put point to top line of window"
    (interactive)
    (move-to-window-line 0))

  (global-set-key "\M-," 'point-to-top)
#+END_SRC
** put point at beginning of the last visible line
#+BEGIN_SRC emacs-lisp
  (defun point-to-bottom ()
    "Put point at beginning of the last visible line"
    (interactive)
    (move-to-window-line -1))

  ; can't work becase coved by evil map
  (global-set-key "\M-." 'point-to-bottom)
#+END_SRC
** move line to top
#+BEGIN_SRC emacs-lisp
  (defun line-to-top ()
      "Move current line to top of window."
    (interactive)
    (recenter 0))

  (global-set-key "\M-!" 'line-to-top)
#+END_SRC
** tags loop continue
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x," 'tags-loop-continue)
#+END_SRC
* buffer
** handle link file, make buffer read only when edit a link and give options to handle this
#+BEGIN_SRC emacs-lisp  
  (add-hook 'find-file-hooks
            '(lambda ()
               (if (file-symlink-p buffer-file-name)
                   (progn
                     (setq buffer-read-only t)
                     (message "File is symlink")))))

  (defun visit-target-instead ()
    "Replace the current buffer with a buffer visiting the link target."
    (interactive)
    (if buffer-file-name
        (let ((target (file-symlink-p buffer-file-name)))
          (if target
              (find-alternate-file target)
            (error "Not visiting a symlink")))
      (error "Not visiting a file")))

  (defun clobber-symlink ()
    "Replace symlink with a copy of the file."
    (interactive)
    (if buffer-file-name
        (let ((target (file-symlink-p buffer-file-name)))
          (if target
              (if (yes-or-no-p (format "Replace %s with %s?" buffer-file-name target))
                  (progn
                    (delete-file buffer-file-name)
                    (write-file buffer-file-name))
                )
            (error "Not visiting a symlink")))
      (error "Not visiting a file")))
#+END_SRC
** when interactive, switch to existing buffer only, unless given a prefix argument.
#+BEGIN_SRC emacs-lisp
  (defadvice switch-to-buffer (before existing-buffer
                                      activate compile)
    "When interactive, switch to existing buffers only,unless given a prefix argument."
    (interactive
     (list (read-buffer "Switch to buffer:"
                        (other-buffer)
                        (null current-prefix-arg)))))
#+END_SRC
* program
** c
#+BEGIN_SRC emacs-lisp
(setq c-basic-offset 4)
#+END_SRC
** indent-guid
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :ensure t
    :config
    (indent-guide-global-mode))
#+END_SRC
** program theme
#+BEGIN_SRC emacs-lisp
  (use-package moe-theme
    :ensure t
    :config
    (moe-light)
    (set-face-attribute 'default nil :background "#ffffff" :foreground "#5f5f5f"))
#+END_SRC
** bind command-; to coment-or-uncommand region
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-/") 'comment-or-uncomment-region)
#+END_SRC
** don't use tab to indent
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(add-hook 'python-mode-hook (lambda () (setq tab-width 4)))
#+END_SRC
* edit
** insert time and date
#+BEGIN_SRC emacs-lisp
  (defvar insert-time-format "%X"
    "*Format for \\[insert-time] (c.f. 'format-time-string).")

  (defvar insert-date-format "%x"
    "*Format for \\[insert-date] (c.f. 'format-time-stirng').")

  (defun insert-time ()
    "Insert the current time according to insert-time-format."
    (interactive "*")
    (insert (format-time-string insert-time-format (current-time))))

  (defun insert-date ()
    "Insert the current date according to insert-date-format."
    (interactive "*")
    (insert (format-time-string insert-date-format (current-time))))
#+END_SRC
* php mode
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    :config
    (autoload 'php-mode "php-mode" "Major mode for editing PHP code." t)
    (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
    (add-to-list 'auto-mode-alist '("\\.inc$" . php-mode)))
#+END_SRC
* the rest
#+BEGIN_SRC emacs-lisp
;; Org-mode stuff
(use-package org-bullets
  :ensure t
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(setq indo-enable-flex-matching t)
(setq indo-everywhere t)
(ido-mode 1)





;; lua mode
(defun th-lua_hook ()
  (progn
    (setq indent-tabs-mode nil)
    (setq tab-width 4)
    (setq lua-indent-level 2)))

(add-hook 'lua-mode-hook 'th-lua_hook)

;; yaml mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

;; lua mode
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

(setq package-selected-packages th-packages)

;; config auto-complete
(require 'auto-complete)

(require 'auto-complete-config)
(ac-config-default)

;; enable evil-surround
(require 'evil-surround)
(global-evil-surround-mode 1)

(require 'key-chord)

;; config ominisharp-emacs
(setq omnisharp-server-executable-path "/usr/local/bin/omnisharp")

;; config smali
(autoload 'smali-mode "smali-mode" "Major mode for editing and viewing smali issues" t)
(add-to-list 'auto-mode-alist '(".smali$" . smali-mode))


;; config not tab
(setq-default indent-tabs-mode nil)
#+END_SRC
* Company
#+BEGIN_SRC  emacs-lisp
  ;; config company
  (use-package company
    :defer t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (global-company-mode)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    )



  ;; custom org mode
  ;; C-c [ to add file to agenda-files
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)


  ;; turn on recentf files feature
  (recentf-mode 1)

  ;; auto follow link
  (setq vc-follow-symlinks 1)

  (when (display-graphic-p)
      (scroll-bar-mode -1))

  (global-linum-mode 1) ; alway shwo line numbers
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (electric-pair-mode t)



  ;; add make file to makefile-mode
  (add-to-list 'auto-mode-alist '("Makefile" . makefile-mode))
#+END_SRC
* debug
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-?" 'help-command)
#+END_SRC
** undo scrool up n times
#+BEGIN_SRC emacs-lisp
  (defvar unscroll-point (make-marker)
    "Cursor position for next call to 'unscroll'.")

  (defvar unscroll-window-start (make-marker)
    "Window start for next cal to 'unscroll'.")

  (defvar unscroll-hscroll nil
    "Hscroll for next call to 'unscroll'.")

  (put 'scroll-up 'unscrollable t)
  (put 'scroll-down 'unscrollable t)
  (put 'scroll-left 'unscrollable t)
  (put 'scroll-right 'unscrollable t)

  (defun unscroll-maybe-remember ()
    "Common function for 'unscroll'."
    (if (not (get last-command 'unscrollable))
        (progn
          (set-marker unscroll-point (point))
          (set-marker unscroll-window-start (window-start))
          (setq unscroll-hscroll (window-hscroll)))))

  (defadvice scroll-up (before remember-for-unscroll activate compile)
    "Remember where we start from, for 'unscroll'."
    (unscroll-maybe-remember))

  (defadvice scroll-down (before remember-for-unscroll activate compile)
    "Remember where we started from, for 'unscroll'."
    (unscroll-maybe-remember))

  (defadvice scroll-right (before remember-for-unscroll activate compile)
    "Remember where we started from, for 'unscroll'."
    (unscroll-maybe-remember))

  (defadvice scroll-down (before remember-for-unscroll activate compile)
    "Remember where we started from, for 'unscroll'."
    (unscroll-maybe-remember))

  (defun unscroll ()
    "Jump to location specified by 'unscroll-to'."
    (interactive)
    (if (not unscroll-point)
        (error "Cannot unscroll yet"))
    (goto-char unscroll-point)
    (set-window-start nil unscroll-window-start)
    (set-window-hscroll nil unscroll-hscroll))
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
* test
#+BEGIN_SRC emacs-lisp
  (defun test1()
    (interactive)
    (message-box "hello in test1"))
#+END_SRC

* headline auto indent when in evil+org-mode
#+BEGIN_SRC emacs-lisp
(defun th-headline-auto-indent(start end len)
  (if (and (eq len 0)
       (th-should-handle-headline))
      (save-excursion (th-del-space-to-asterisk))))

(defun th-should-handle-headline()
  "是否应该处理headline的缩进, 
当*(一个多多个)不在行首的时候，
或-不在行首
应该处理."
  (and
   (eq (char-syntax (preceding-char)) ?\ )
   (or
    (looking-back "^\\s +\\*+\\s " nil)
    (looking-back "^\\s +\\-+\\s " nil))))

(defun th-del-space-to-asterisk()
  "从行首开始，删除至第一个不为空格的元素."
  (let ((left (progn
                (beginning-of-line)
                (point)))
        (right (progn
                 (beginning-of-line)
                 (skip-syntax-forward " ")
                 (point))))
    (delete-region left right)))

(defun th-add-headline-auto-indent-hook()
    (add-hook 'after-change-functions 'th-headline-auto-indent t t))

(add-hook 'org-mode-hook 'th-add-headline-auto-indent-hook t)
#+END_SRC
